# -*- coding: utf-8 -*-
"""untitled7-data-visualization-1-2ipynb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/Abhisekbag1/e50b0f8f1ac3905580085126c900b2ea/untitled7-data-visualization-1-2ipynb.ipynb
"""

# Install necessary library for 3D plotting
!pip install plotly

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go

# Load dataset
def load_dataset():
    from google.colab import files
    uploaded = files.upload()
    for filename in uploaded.keys():
        print(f"File {filename} uploaded successfully!")
        return pd.read_csv(filename)

# Load diabetes dataset
print("Please upload the 'diabetes.csv' file.")
df = load_dataset()

# Verify dataset
print("Dataset loaded successfully!")
print(df.head())  # Check the first few rows
print(df.columns)  # Display column names

# Step 3: Create a line chart
def line_chart(df):
    print("Generating Line Chart...")
    plt.figure(figsize=(10, 6))
    if 'Age' in df.columns and 'Outcome' in df.columns:
        outcome_counts = df.groupby('Age')['Outcome'].value_counts().unstack()
        for status in outcome_counts.columns:
            plt.plot(outcome_counts.index, outcome_counts[status], label=f'Outcome ({status})')
        plt.title('Line Chart: Age vs Diabetes Outcome')
        plt.xlabel('Age')
        plt.ylabel('Count')
        plt.legend()
        plt.grid(True)
        plt.show()
    else:
        print("The dataset does not contain the necessary columns for the line chart.")

# Step 4: Generate a scatter plot
def scatter_plot(df):
    print("Generating Scatter Plot...")
    plt.figure(figsize=(10, 6))
    if 'Age' in df.columns and 'BMI' in df.columns:
        sns.scatterplot(data=df, x='Age', y='BMI', hue='Outcome', palette='viridis')
        plt.title('Scatter Plot: Age vs BMI (Diabetes Outcome)')
        plt.xlabel('Age')
        plt.ylabel('BMI')
        plt.show()
    else:
        print("The dataset does not contain the necessary columns for the scatter plot.")

# Step 5: Create a heatmap
def heatmap(df):
    print("Generating Heatmap...")
    numeric_cols = df.select_dtypes(include=['float64', 'int64'])
    if not numeric_cols.empty:
        corr_matrix = numeric_cols.corr()
        plt.figure(figsize=(8, 6))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
        plt.title('Heatmap: Correlation Matrix')
        plt.show()
    else:
        print("The dataset does not contain numeric columns for the heatmap.")

# Step 6: Generate a 3D plot
def plot_3d(df):
    print("Generating 3D Plot...")
    if {'Age', 'BMI', 'Outcome'}.issubset(df.columns):
        fig = go.Figure()
        fig.add_trace(go.Scatter3d(
            x=df['Age'],
            y=df['BMI'],
            z=df['Outcome'],
            mode='markers',
            marker=dict(
                size=5,
                color=df['Age'],  # Color based on age
                colorscale='Viridis',
                opacity=0.8
            )
        ))
        fig.update_layout(
            title='3D Scatter Plot: Age, BMI, and Diabetes Outcome',
            scene=dict(
                xaxis_title='Age',
                yaxis_title='BMI',
                zaxis_title='Outcome'
            )
        )
        fig.show()
    else:
        print("The dataset does not contain the necessary columns for the 3D plot.")

# Step 7-10: Run all visualizations
line_chart(df)
scatter_plot(df)
heatmap(df)
plot_3d(df)